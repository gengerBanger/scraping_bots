from parser import *
from config import TOKEN
import telebot
from telebot import types

bot = telebot.TeleBot(token=TOKEN)

main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_OneCoin = types.KeyboardButton(text='/OneCoin')
button_top15 = types.KeyboardButton(text='/top15')
button_top100 = types.KeyboardButton(text='/top100')
update = types.KeyboardButton(text='/update_the_data')
clear = types.KeyboardButton(text='/clear')
main_keyboard.add(button_OneCoin, button_top15, button_top100, update, clear)

buffer_of_messagesID = list()
def uptade_the_data(chat_id):
    load = bot.send_message(chat_id=chat_id, text='‚åõ–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è‚åõ').id
    main_parser()
    bot.delete_message(chat_id, load)
    sendKeyboard(chat_id)
def sendKeyboard(id):
    buffer_of_messagesID.append(bot.send_message(chat_id=id, text='‚å®–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é‚å®', reply_markup=main_keyboard).id)

@bot.message_handler(commands=['clear'])
def clear_chat(message: types.Message):
    chat_id = message.chat.id
    buffer_of_messagesID.append(message.message_id)
    for message_id in buffer_of_messagesID:
        bot.delete_message(chat_id, message_id)
    buffer_of_messagesID.clear()
@bot.message_handler(commands=['start', 'help'])
def on_start(message: types.Message):
    chat_id = message.chat.id
    name = message.from_user.first_name
    buffer_of_messagesID.append(message.id)
    inline_key = types.InlineKeyboardMarkup()
    ref_button = types.InlineKeyboardButton(text='Coin Market Cap', url=URL)
    inline_key.add(ref_button)
    buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text=f'–ü—Ä–∏–≤–µ—Ç, {name}üñê\n\n –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
                                           f' –ø–æ –∫—É—Ä—Å—É, –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Çü§ë\n\n'
                                           f'ü§ñ–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n\n'
                                           f'1Ô∏è‚É£ –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–µ –ø–æ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n'
                                           f'2Ô∏è‚É£ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø 15 –º–æ–Ω–µ—Ç –ø–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∑–∞ —á–∞—Å / –¥–µ–Ω—å / –º–µ—Å—è—Ü\n\n'
                                           f'3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å csv —Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç–µ, –≤—Ö–æ–¥—è—â–µ–π –≤ —Ç–æ–ø 100 –ø–æ –æ–±—â–µ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n\n'
                                           f'–î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è —Å —Å–∞–π—Ç–∞\n üìäCoin Market Capüìä', reply_markup=inline_key).id)
    uptade_the_data(chat_id)
def get_OneCoinInf(message: types.Message):
    message_text = message.text
    buffer_of_messagesID.append(message.id)
    chat_id = message.chat.id
    for coin in coins:
        if coin == message_text:
            prise = coins[coin]['price']
            h1 = coins[coin]['changes per hour']
            h24 = coins[coin]['changes per day']
            week = coins[coin]['changes per week']
            capitalization = coins[coin]['market capitalization']
            answer = f'üí∞C—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ãüí∞ {coin} = {prise}\n\n' \
                     f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —á–∞—Å : {h1}\n\n' \
                     f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å : {h24}\n\n' \
                     f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é : {week}\n\n' \
                     f'üí∏–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—èüí∏ : {capitalization}'
            buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text=answer).id)
            sendKeyboard(chat_id)
            break
    else:
        buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text='‚ùó–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞‚ùó').id)

@bot.message_handler(commands=['OneCoin'])
def one_coin_inf(message: types.Message):
    chat_id = message.chat.id
    buffer_of_messagesID.append(message.id)
    buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã ‚ùó–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏‚ùó').id)
    bot.register_next_step_handler(message, get_OneCoinInf)
def get_info_top15(parameter):
    hourDict = {}
    for coin in coins:
        hourDict[coin] = coins[coin][parameter][:len(coins[coin][parameter]) - 1]
        if hourDict[coin][0] == '+':
            hourDict[coin] = float(hourDict[coin][1:])
        else:
            hourDict[coin] = float(hourDict[coin])
    newhourDict = dict(sorted(hourDict.items(), key=lambda x: x[1], reverse=True))
    answer = ''
    count = 1
    for item in newhourDict:
        answer += f'{count}) {item} : {newhourDict[item]}\n\n'
        count += 1
        if count == 16:
            break
    return answer
def get_top15(message: types.Message):
    buffer_of_messagesID.append(message.id)
    chat_id = message.chat.id
    match message.text:
        case '–ß–ê–°':
            buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text=get_info_top15('changes per hour')).id)
        case '–î–ï–ù–¨':
            buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text=get_info_top15('changes per day')).id)
        case '–ù–ï–î–ï–õ–Ø':
            buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text=get_info_top15('changes per week')).id)
    sendKeyboard(chat_id)
@bot.message_handler(commands=['top15'])
def top15_inf(message: types.Message):
    chat_id = message.chat.id
    buffer_of_messagesID.append(message.id)
    buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (–ß–ê–° / –î–ï–ù–¨ / –ù–ï–î–ï–õ–Ø)\n'
                                                                       '‚ùó–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏‚ùó').id)
    bot.register_next_step_handler(message, get_top15)

@bot.message_handler(commands=['top100'])
def top100_inf(message: types.Message):
    chat_id = message.chat.id
    buffer_of_messagesID.append(message.id)
    save_csv(storage, coins)
    file = open('result.csv', 'rb')
    buffer_of_messagesID.append(bot.send_document(chat_id=chat_id, document=file).id)
    file.close()

@bot.message_handler(commands=['update_the_data'])
def update(message: types.Message):
    chat_id = message.chat.id
    buffer_of_messagesID.append(message.id)
    uptade_the_data(chat_id)
    buffer_of_messagesID.append(bot.send_message(chat_id=chat_id, text='üìã–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ãüìã').id)

if __name__ == '__main__':
    bot.infinity_polling()
